<?php
/*
* LimitlessLED Technical Developer Opensource API: http://www.limitlessled.com/dev/
* The MIT License (MIT)
*

*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.

Object creation: $light = new Milight('x.y.z.w',1,2,2562); // where x.y.z.w is the wifi bridge IP address on the LAN, 1 is the number of repetition of the control,
															2, is the delay in ms between 2 repetitions, 2562 is the wifi Bridge Port

6 Methods for all bulbs type
-whiteSetGroup($grp)	Select Group for Dual White Lights. 0=All groups, 1 to 4 desired group. To use before lighting light on
-whiteGetGroup() 		Return Group for Dual White Lights. 0=All groups, 1 to 4 desired group
-rgbwSetGroup($grp)		Select Group for RGBW Lights. 0=All groups, 1 to 4 desired group. To use before lighting light on
-rgbwGetGroup()			Return Group for RGBW Lights. 0=All groups, 1 to 4 desired group
-rgbwwSetGroup($grp)	Select Group for RGBWW Lights. 0=All groups, 1 to 4 desired group. To use before lighting light on
-rgbwwGetGroup()		Return Group for RGBWW Lights. 0=All groups, 1 to 4 desired group


8 Methods for V6 Bridge
-rgbwwBridgeOn()				Light On selected group and uses Actual Brightness & Color & Mode (ie rgb or w)
-rgbwwBridgeOff()				Light Off selected group
-rgbwwBridgeOnBrightness($val)	Light On selected group and set Brightness to specified value from 0 to 100 ( translated into 0x02 to 0x1e) - This affects only Actual mode (ie rgb or w)-rgbwwBridgeOnNight()			Light On selected group and set Night mode
-rgbwwBridgeOnWhite()			Light On selected group and set mode to White
-rgbwwBridgeOnColor($color)		Light On selected group and set mode to specified Color from 0x00 to 0xFF or a predefined value in the below list or a #rrggbb color code
								Random, Violet, Blue, BabyBlue, Aqua, Mint, SpringGreen, Green, LimeGreen, Yellow, YellowOrange, Orange, Red, Pink, Fuchsia, Lilac, Lavendar
								eg: rgbwwBridgeOnColor(0x33) or rgbwwBridgeOnColor('Mint') or rgbwwBridgeOnColor('#c03378')
-rgbwwBridgeOnDisco($prog)		Light On selected group and set mode to selected Disco program (from 1 to 9) - see below for program description.
								Tuning the desired brightness right after this method is needed - Disco seem to start with Mid brightness as well as Mid DiscoSpeed
								Available disco programs: 
- rgbwwBridgeDiscoSlower() 		Slower disco mode
- rgbwwDiscofaxter() 			Faster disco mode


11 Methods for dual white bulbs
-whiteOn()				Light On selected group and uses Actual Brightness & Color Temperature
-whiteOnMax()			Light On selected group and set Brightness to Max
-whiteOnMid()			Light On selected group and set Brightness to Mid
-whiteOnMin()			Light On selected group and set Brightness to Min
-whiteOnNight()			Light On selected group and set Night mode
-whiteOnWarm()			Light On selected group and set Color Temperature to Full Warm
-whiteOnLukewarm()		Light On selected group and set Color Temperature to Mid Warm/Cool
-whiteOnCool()			Light On selected group and set Color Temperature to Full Cool
-whiteBrightness($dir)	Modify Brightness - To be used right after whiteOn method (10 steps of brightness possible) -1=One step decrease, 1=One step increase
-whiteColor($dir)		Modify Color Temperature - To be used right after whiteOn method (10 steps of color temperature possible) -1=One step cooler, 1=One step warmer
-whiteOff()				Light Off selected group


18 Methods for rgbww bulbs
-rgbwwOn()					Light On selected group and uses Actual Brightness & Color & Mode (ie rgb or w)
-rgbwwOff()					Light Off selected group
-rgbwwOnMax()				Light On selected group and set Brightness to Max for Actual Mode (ie rgb or w) - Note that W and RGB have separate brightness memory
-rgbwwOnMid()				Light On selected group and set Brightness to Mid for Actual Mode (ie rgb or w) - Note that W and RGB have separate brightness memory
-rgbwwOnMin()				Light On selected group and set Brightness to Min for Actual Mode (ie rgb or w) - Note that W and RGB have separate brightness memory
-rgbwwOnBrightness($val)	Light On selected group and set Brightness to specified value from 0 to 100 ( translated into 0x02 to 0x1e) - This affects only Actual mode (ie rgb or w)
-rgbwwOnKelvin ($val)		set Color Temperature to specified value from 0 (cool) to 100 (warm)
-rgbwwOnSaturation ($val)	set Saturation to specified value from 0 (no) to 100 (full)
-rgbwwOnNight()				Light On selected group and set Night mode
-rgbwwOnWhite()				Light On selected group and set mode to White
-rgbwwOnColor($color)		Light On selected group and set mode to specified Color from 0x00 to 0xFF or a predefined value in the below list or a #rrggbb color code
							Random, Violet, Blue, BabyBlue, Aqua, Mint, SpringGreen, Green, LimeGreen, Yellow, YellowOrange, Orange, Red, Pink, Fuchsia, Lilac, Lavendar
							eg: rgbwOnColor(0x33) or rgbwOnColor('Mint') or rgbwOnColor('#c03378')
-rgbwwOnDisco($prog)		Light On selected group and set mode to selected Disco program (from 1 to 9) - see below for program description.
							Tuning the desired brightness right after this method is needed - Disco seem to start with Mid brightness as well as Mid DiscoSpeed
							Available disco programs: 1=rainbowSwirl, 2=whiteFade, 3=rgbwFade, 4=rainbowJump, 5=disco, 6=redTwinkle, 7=greenTwinkle, 8=blueTwinkle, 9=allCombined
-rgbwwDiscoNext()			Light On selected group and set mode to next Disco program (Round Robin 1 to 9 than 1 again) - see above for program description description.
							Tuning the desired brightness right after this method is needed - Disco seem to start with Mid brightness as well as Mid DiscoSpeed
-rgbwwDiscoMin()			Set disco speed to Min - It turns bulb on but does not switch its mode (rgw,w,disco), so this has no effect when not in disco mode
							To be used right after rgbwOnDisco($prog) or rgbwDiscoNext() methods
-rgbwwDiscoMid()			Same as above with speed to Mid
-rgbwwDiscoMax()			Same as above with speed to Max
-rgbwwDiscoSlower() 		Slower disco mode
-rgwwDiscoFaster() 			Faster disco mode


12 Methods for rgbw bulbs
-rgbwOn()				Light On selected group and uses Actual Brightness & Color & Mode (ie rgb or w)
-rgbwOff()				Light Off selected group
-rgbwOnMax()			Light On selected group and set Brightness to Max for Actual Mode (ie rgb or w) - Note that W and RGB have separate brightness memory
-rgbwOnMid()			Light On selected group and set Brightness to Mid for Actual Mode (ie rgb or w) - Note that W and RGB have separate brightness memory
-rgbwOnMin()			Light On selected group and set Brightness to Min for Actual Mode (ie rgb or w) - Note that W and RGB have separate brightness memory
-rgbwOnBrightness($val)	Light On selected group and set Brightness to specified value from 0 to 100 ( translated into 0x02 to 0x1e) - This affects only Actual mode (ie rgb or w)
-rgbwOnNight()			Light On selected group and set Night mode
-rgbwOnWhite()			Light On selected group and set mode to White
-rgbwOnColor($color)	Light On selected group and set mode to specified Color from 0x00 to 0xFF or a predefined value in the below list or a #rrggbb color code
						Random, Violet, Blue, BabyBlue, Aqua, Mint, SpringGreen, Green, LimeGreen, Yellow, YellowOrange, Orange, Red, Pink, Fuchsia, Lilac, Lavendar
						eg: rgbwOnColor(0x33) or rgbwOnColor('Mint') or rgbwOnColor('#c03378')
-rgbwOnDisco($prog)		Light On selected group and set mode to selected Disco program (from 1 to 9) - see below for program description.
						Tuning the desired brightness right after this method is needed - Disco seem to start with Mid brightness as well as Mid DiscoSpeed
						Available disco programs: 1=rainbowSwirl, 2=whiteFade, 3=rgbwFade, 4=rainbowJump, 5=disco, 6=redTwinkle, 7=greenTwinkle, 8=blueTwinkle, 9=allCombined
-rgbwDiscoSlower() 		Slower disco mode
-rgbwDiscoFaster() 		Faster disco mode

*/

/*
* First version(C) by B. Caron - 2016/12/01
*	full milight V6 bridge control
*	
*
*/


class mylightV6
{

	private $_host;
	private $_port;
	private $_wait;
	private $_repeat;
	private $_repeatOK;
	private $_ID1;
	private $_ID2;
	private $_socket;
	private $_color = array(0,0,0,0,0,0);
	private $_Seq = array(0,0);
	private $_delay = 101000; //microseconds
	private $_rgbwwActiveGroup; // 0 means all, else group 1 to 4
	private $_rgbwActiveGroup; // 0 means all, else group 1 to 4
	private $_whiteActiveGroup; // 0 means all, else group 1 to 4	
	private $_CodeToSend= array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF); //
	private $_commandCodes = array(
	//RGBWW Bulbs commands
	'rgbwwGetWBID' => array(0x20, 0x00, 0x00, 0x00, 0x16, 0x02, 0x62, 0x3A, 0xD5, 0xED, 0xA3, 0x01, 0xAE, 0x08, 0x2D, 0x46, 0x61, 0x41, 0xA7, 0xF6, 0xDC, 0xAF, 0XD3, 0xE6, 0x00, 0X00, 0x1E), //
	'rgbwwReset' => array(0x30, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), //
	'rgbwwReq' => array(0x10, 0x00, 0x00, 0x00, 0x0A, 0x02, 0xD3, 0xE6, 0x11, 0xAC, 0xCF, 0x23, 0xF5, 0x7B, 0xBA, 0x00, 0x00, 0x00), //
	'rgbwwAllOn' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'rgbwwAllOff' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //	
	'rgbwwGroup1On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwGroup2On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'rgbwwGroup3On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'rgbwwGroup4On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwwGroup1Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwGroup2Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'rgbwwGroup3Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'rgbwwGroup4Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwwAllNightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'rgbwwAllWhiteOn' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x05, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'rgbwwGroup1NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwGroup2NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'rgbwwGroup3NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'rgbwwGroup4NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwwBrightness' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwKelvin' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x05, 0xFF, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwwSaturation' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x02, 0xFF, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwwDiscoMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x06, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF), //
	'rgbwwDiscoModeDecrease' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x04, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF), //
	'rgbwwDiscoModeIncrease' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF), //
	'rgbwwDiscoSlower' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x04, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF), //
	'rgbwwDiscoFaster' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF), //
	'rgbwwAllSetToWhite' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x05, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'rgbwwGroup1SetToWhite'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x05, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwGroup2SetToWhite'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x05, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'rgbwwGroup3SetToWhite'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x05, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'rgbwwGroup4SetToWhite'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x05, 0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwwColor'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x08, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0xFF),
	// V6 bridge commands
	'rgbwwBridgeOff'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwBridgeOn'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwBridgeDiscoMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x00, 0x04, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwBridgeDiscoSlower' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwBridgeDiscoFaster' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwBridgeColor'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xFF),
	'rgbwwBridgeSetToWhite' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x00, 0x03, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwwBridgeBrightness' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x00, 0x02, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	// RGBW bulb commands
	'rgbwAllOn' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'rgbwAllOff' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //	
	'rgbwGroup1On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwGroup2On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'rgbwGroup3On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'rgbwGroup4On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwGroup1Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwGroup2Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'rgbwGroup3Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'rgbwGroup4Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwAllNightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'rgbwAllWhiteOn' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'rgbwGroup1NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwGroup2NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'rgbwGroup3NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'rgbwGroup4NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwBrightness' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x02, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwDiscoMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x04, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF), //
	'rgbwDiscoSlower' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x04, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF), //
	'rgbwDiscoFaster' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF), //
	'rgbwAllSetToWhite' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x5, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'rgbwGroup1SetToWhite'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'rgbwGroup2SetToWhite'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'rgbwGroup3SetToWhite'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'rgbwGroup4SetToWhite'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x03, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'rgbwColor'  => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x07, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0xFF),
	// Dual white bulb commands
	'whiteAllOn' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //
	'whiteAllOff' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //	
	'whiteGroup1On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'whiteGroup2On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'whiteGroup3On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'whiteGroup4On' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'whiteGroup1Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'whiteGroup2Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'whiteGroup3Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'whiteGroup4Off' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'whiteAllNightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF), //	
	'whiteGroup1NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'whiteGroup2NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF), //
	'whiteGroup3NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF), //
	'whiteGroup4NightMode' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'whiteBrightnessInc' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'whiteBrightnessDec' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF), //
	'whiteKelvinInc' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF), //
	'whiteKelvinDec' => array(0x80, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xE6, 0x80, 0x00, 0x31, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF) //
	);


	public function __construct($host = '192.168.1.110', $wait=0, $repeat=1, $port = 5987) {
		$this->_host = $host;
		$this->_port = $port;
		$this->_repeatOK = true;
		if ($wait < 0)
			$wait = 0;
		if ($wait > 1000)
			$wait = 1000;
		$this->_wait = $wait*1000;
		if ($repeat<1)
			$repeat =1;
		if ($repeat>5)
			$repeat =4;
		$this->_repeat = $repeat;
		$this->rgbwwSetGroup();
		$this->rgbwSetGroup();
		$this->whiteSetGroup();
		$this->Seq[1]=0;
	}

	//Used to dynamically call class methods
	public function call(){
		echo __METHOD__;
	}

	public function MilightPrep(){
		log::add('wifilight','debug','Reset');
		if ($this->_socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP)) {
			socket_set_option($this->_socket,SOL_SOCKET,SO_RCVTIMEO,array("sec"=>0,"usec"=>20000));
			$command = $this->_commandCodes['rgbwwGetWBID'];
			$message = vsprintf(str_repeat('%c', count($command)), $command);

			log::add('wifilight','debug','Start - ID');
			$Icpt=0;
			
			do {
				socket_sendto($this->_socket, $message, strlen($message), 0, $this->_host, $this->_port);		
				$Icpt++;
				$Icpt2=0;
				do {
					unset($buf);
					$from = "";
					
					log::add('wifilight','debug','receive ID');
					usleep(20000);
					socket_recvfrom($this->_socket, $buf, 30,MSG_DONTWAIT, $this->_host, $this->_port);
					$Icpt2++;
					log::add('wifilight','debug',"buf0=".dechex(ord($buf[0])));
					for ($iBcl=0;$iBcl<2;$iBcl++){
						//log::add('wifilight','debug',"mess=".dechex(ord($buf[$iBcl])));
					} 
				}while ((ord($buf[0])!=0x28) && ($Icpt2<50));
			} while ((ord($buf[0])!=0x28) && ($Icpt<4));
			if (ord($buf[0])==0x28) {
				$this->_ID1 = ord($buf[19]);
				$this->_ID2 = ord($buf[20]);
				log::add('wifilight','debug','ID1/2 : '.$this->_ID1.' '.$this->_ID2);
			}
			$Ret=array(ord($buf[0]),ord($buf[19]),ord($buf[20]));
			}
		else {
			log::add('wifilight','debug','Error - No socket');
		}
		return $Ret;
	}
	private function send2() {
				$command = $this->_commandCodes['rgbwwReset'];
				$command[5]=$this->_ID1;
				$command[6]=$this->_ID2;
				$message = vsprintf(str_repeat('%c', count($command)), $command);
				socket_sendto($this->_socket, $message, strlen($message), 0, $this->_host, $this->_port);

				$this->Seq[1]++;

				$this->_CodeToSend[5]=$this->_ID1;
				$this->_CodeToSend[6]=$this->_ID2;
				$this->_CodeToSend[8]=$this->Seq[1];
		
				$iVal=0;
				for ($iBcl=10;$iBcl<21;$iBcl++){
					$iVal=$iVal+$this->_CodeToSend[$iBcl];
				}
				$ival=$iVal & 0xFF;
				$this->_CodeToSend[21]=$ival;

				$message = vsprintf(str_repeat('%c', count($this->_CodeToSend)), $this->_CodeToSend);
				/*
				for ($iBcl=0;$iBcl<22;$iBcl++){
					log::add('wifilight','debug',"mess=".dechex(ord($message[$iBcl])));
				}
				*/
				
				//log::add('wifilight','debug',"Len=".strlen($message));
				socket_sendto($this->_socket, $message, strlen($message), 0, $this->_host, $this->_port);	
				$from = "";
				//log::add('wifilight','debug','First Receive');

				$Icpt=0;
				do {
					usleep(10000);
					socket_recvfrom($this->_socket, $buf, 30,MSG_DONTWAIT, $this->_host, $this->_port);	
					$Icpt++;
					log::add('wifilight','debug','ACQ');
				} while (ord($buf[0])!=0x88 && $Icpt<50);
				if (ord($buf[0])==0x88 ) {
					log::add('wifilight','debug','Send OK');			
				}
				else {
					log::add('wifilight','debug','Error - No Ack');
				}
			usleep(20000);
	
		log::add('wifilight','debug','End control');
		
	}
	private function send() {
		log::add('wifilight','debug','Send begin');
		if ($this->_socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP)) {
			socket_set_option($this->_socket,SOL_SOCKET,SO_RCVTIMEO,array("sec"=>0,"usec"=>10000));
			$command = $this->_commandCodes['rgbwwGetWBID'];
			$message = vsprintf(str_repeat('%c', count($command)), $command);

			log::add('wifilight','debug','Start - ID');
			$Icpt=0;
			
			do {
				socket_sendto($this->_socket, $message, strlen($message), 0, $this->_host, $this->_port);		
				$Icpt++;
				$Icpt2=0;
				do {
					unset($buf);
					log::add('wifilight','debug','receive ID');
					usleep(10000);
					socket_recvfrom($this->_socket, $buf, 30,MSG_DONTWAIT, $this->_host, $this->_port);
					$Icpt2++;
					log::add('wifilight','debug',"buf0=".dechex(ord($buf[0])));
					for ($iBcl=0;$iBcl<2;$iBcl++){
						//log::add('wifilight','debug',"mess=".dechex(ord($buf[$iBcl])));
					} 
				}while ((ord($buf[0])!=0x28) && ($Icpt2<40));
			} while ((ord($buf[0])!=0x28) && ($Icpt<2));
			if (ord($buf[0])==0x28) {
				$this->_ID1 = ord($buf[19]);
				$this->_ID2 = ord($buf[20]);
				log::add('wifilight','debug','ID1/2 : '.$this->_ID1.' '.$this->_ID2);

				usleep(10000);
				unset($command);
				log::add('wifilight','debug','Reset');
				$command = $this->_commandCodes['rgbwwReset'];
				$command[5]=$this->_ID1;
				$command[6]=$this->_ID2;
				$message = vsprintf(str_repeat('%c', count($command)), $command);
				socket_sendto($this->_socket, $message, strlen($message), 0, $this->_host, $this->_port);

				$this->Seq[1]++;

				usleep(10000);
				
				$this->_CodeToSend[5]=$this->_ID1;
				$this->_CodeToSend[6]=$this->_ID2;
				$this->_CodeToSend[8]=$this->Seq[1];
		
				$iVal=0;
				for ($iBcl=10;$iBcl<21;$iBcl++){
					$iVal=$iVal+$this->_CodeToSend[$iBcl];
				}
				$ival=$iVal & 0xFF;
				$this->_CodeToSend[21]=$ival;

				$message = vsprintf(str_repeat('%c', count($this->_CodeToSend)), $this->_CodeToSend);
				/*
				for ($iBcl=0;$iBcl<22;$iBcl++){
					log::add('wifilight','debug',"mess=".dechex(ord($message[$iBcl])));
				}
				*/
				
				//log::add('wifilight','debug',"Len=".strlen($message));
				socket_sendto($this->_socket, $message, strlen($message), 0, $this->_host, $this->_port);	
				$from = "";
				//log::add('wifilight','debug','First Receive');

				$Icpt=0;
				do {
					usleep(20000);
					socket_recvfrom($this->_socket, $buf, 30,MSG_DONTWAIT, $this->_host, $this->_port);	
					$Icpt++;
					log::add('wifilight','debug','ACQ');
				} while (ord($buf[0])!=0x88 && $Icpt<50);
				if (ord($buf[0])==0x88 ) {
					log::add('wifilight','debug','Send OK');			
					
					usleep(20000);
				}
				else {
					log::add('wifilight','debug','Error - No Ack');
				}
			}
			else {
				log::add('wifilight','debug','Error - No ID');
			}
			socket_close($this->_socket);				
		}
		else {
			log::add('wifilight','debug','Error - No socket');
		}
		log::add('wifilight','debug','End control');	
	}
	
	public function MilightSetID($Id) {
		$this->_ID1 = $Id[1];
		$this->_ID2 = $Id[2];
	}
	
	
	// start methods for RGBW Lights
	
	public function rgbwGetColor() {
		return $this->_color[$this->_rgbwActiveGroup];
		return 0;
	}
	
	public function rgbwSetGroup($group=0) {
		$this->_rgbwActiveGroup = $group;
	}

	public function rgbwGetGroup($group=0) {
		return $this->_rgbwActiveGroup;
	}
	
	public function rgbwOn() {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;
		$this->send2();
	}

	public function rgbwOff() {
		log::add('wifilight','debug',"Off");
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOff'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;
		$this->send2();
	}

	public function rgbwOnMax() {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwBrightness'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;
		$this->_CodeToSend[15] = 100;
		$this->send2();
		
	}

	public function rgbwOnMin() {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwBrightness'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;
		$this->_CodeToSend[15]=1;
		$this->send2();	
	}

	public function rgbwOnMid() {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwBrightness'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;
		$this->_CodeToSend[15]=50;
		$this->send2();
	}

	public function rgbwOnBrightness($value=50) {
		if ($value<0) $value=0;
		if ($value>100) $value=100;
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwBrightness'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;
		$this->_CodeToSend[15]=$value;
		$this->send2();
	}
	public function rgbwOnNight() {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwAllNightMode'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;
		$this->send2();
	}	
	public function rgbwOnWhite() {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwAllWhiteOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;
		$this->send2();
	}
	public function rgbwOnDisco($prog) {
	//   1=rainbowSwirl, 2=whiteFade, 3=rgbwFade, 4=rainbowJump, 5=disco, 6=redTwinkle, 7=greenTwinkle, 8=blueTwinkle, 9=allCombined

		if ($prog < 1) $prog=1;
		if ($prog > 9) $prog=9;	
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwDiscoMode'];
		$this->_CodeToSend[19]=$this->_rgbwActiveGroup;
		$this->_CodeToSend[15]=$prog-1;		
		$this->send2();
	}

	
	public function rgbwDiscoSlower() {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwDiscoSlower'];
		$this->_CodeToSend[19]=$this->_rgbwActiveGroup;		
		$this->send2();
	}

	public function rgbwDiscoFaster() {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwDiscoFaster'];
		$this->_CodeToSend[19]=$this->_rgbwActiveGroup;		
		$this->send2();	
	}
	public function rgbwOnColor($color='Mint') {
		$this->_CodeToSend = $this->_commandCodes['rgbwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwActiveGroup;				
		$this->send2();
		$color = (string)$color;
		log::add('wifilight','debug','in color : '.$color);
		$this->_CodeToSend = $this->_commandCodes['rgbwColor'];
		$this->_CodeToSend[19]=$this->_rgbwActiveGroup;
		log::add('wifilight','debug','Case');
		switch ($color) {
			case 'Random':		$this->_CodeToSend[15] = (int)mt_rand(0,255);  
								$this->_color[$this->_rgbwActiveGroup]= $this->ColorTorgbw($this->_CodeToSend[15]);
								break;
			case 'Blue':		$this->_CodeToSend[15] = (-0x00+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#0000FF' ; break;
			case 'Violet':		$this->_CodeToSend[15] = (-0xeb+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#7F00FF' ; break;
			case 'BabyBlue':	$this->_CodeToSend[15] = (-0x20+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#00bbff' ; break;
			case 'Aqua':		$this->_CodeToSend[15] = (-0x30+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#00FFFF' ; break;
			case 'SpringGreen':	$this->_CodeToSend[15] = (-0x40+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#00FF7F' ; break;
			case 'Mint':		$this->_CodeToSend[15] = (-0x4A+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#00FF43' ; break;
			case 'Green':		$this->_CodeToSend[15] = (-0x55+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#00FF00' ; break;
			case 'LimeGreen':	$this->_CodeToSend[15] = (-0x70+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#a1FF00' ; break;
			case 'Yellow':		$this->_CodeToSend[15] = (-0x80+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#FFFF00' ; break;
			case 'YellowOrange':$this->_CodeToSend[15] = (-0x88+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#FFD000' ; break;
			case 'Orange':		$this->_CodeToSend[15] = (-0x8F+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#FFA500' ; break;
			case 'Red':			$this->_CodeToSend[15] = (-0xaa+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#FF0000' ; break;
			case 'Pink':		$this->_CodeToSend[15] = (-0xbd+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#FF0061' ; break;
			case 'Fuchsia':		$this->_CodeToSend[15] = (-0xd6+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#FF00FF' ; break;
			case 'Lilac':		$this->_CodeToSend[15] = (-0xE0+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#D000FF' ; break;
			case 'Lavendar':	$this->_CodeToSend[15] = (-0xF0+170+256+30)%256; $this->_color[$this->_rgbwActiveGroup]= '#6100FF' ; break;
			case ((int)$color > 0x00) && ((int)$color <= 0xff): $x = (int)$color; $this->_CodeToSend[15] = $x;  break;
			case (substr($color,0,1)== "#"):
				$r = (int)hexdec(substr($color,1,2));
				$g = (int)hexdec(substr($color,3,2));
				$b = (int)hexdec(substr($color,5,2));
				log::add('wifilight','debug','subst');
				$this->_CodeToSend[15]= $this->rgbToColorw($r,$g,$b);
				log::add('wifilight','debug','subst2');
				log::add('wifilight','debug','Internal Milight color :'.$this->_CodeToSend[15]." hex=".dechex($this->_CodeToSend[15]));
				$this->_color[$this->_rgbwActiveGroup]= $color;
				//log::add('wifilight','debug','222');
				break;
			default:
				$this->_CodeToSend[15] = 0x40; 
				$this->_color[$this->_rgbwActiveGroup]= $this->ColorTorgbw($this->_CodeToSend[15]);
				break;
		}
		$this->_CodeToSend[16]= $this->_CodeToSend[15];
		$this->_CodeToSend[17]= $this->_CodeToSend[15];
		$this->_CodeToSend[18]= $this->_CodeToSend[15];
		$this->send2();
		log::add('wifilight','debug','put color hex : '.$this->_color[$this->_rgbwActiveGroup]);			
	}

	// Start Methods applicable to RGBWW Lights 
	public function rgbwwGetColor() {
		return $this->_color[$this->_rgbwwActiveGroup];
		return 0;
	}
	
	public function rgbwwSetGroup($group=0) {
		$this->_rgbwwActiveGroup = $group;
	}

	public function rgbwwGetGroup($group=0) {
		return $this->_rgbwwActiveGroup;
	}
	public function rgbwwOn() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;
		$this->send2();
	}

	public function rgbwwOff() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOff'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;
		$this->send2();
	}
	public function rgbwwOnMax() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBrightness'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;
		$this->_CodeToSend[15] = 100;
		$this->send2();	
	}

	public function rgbwwOnMin() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBrightness'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;
		$this->_CodeToSend[15]=1;
		$this->send2();
	}

	public function rgbwwOnMid() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBrightness'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;
		$this->_CodeToSend[15]=50;
		$this->send2();
	}

	public function rgbwwOnBrightness($value=50) {
		if ($value<0) $value=0;
		if ($value>100) $value=100;
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBrightness'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;
		$this->_CodeToSend[15]=$value;
		$this->send2();
	}
	public function rgbwwOnNight() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwOnNight'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;
		$this->send2();
	}	
	public function rgbwwOnWhite() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllWhiteOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;
		$this->send2();
	}
	public function rgbwwOnSaturation($value=50) {
		log::add('wifilight','debug',"value=".$value);
		if ($value<0) $value=0;
		if ($value>100) $value=100;
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwSaturation'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		$this->_CodeToSend[15]=$value;
		$this->send2();
	}
	
	public function rgbwwOnKelvin($value=50) {
		if ($value<0) $value=0;
		if ($value>100) $value=100;
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwKelvin'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		$this->_CodeToSend[15]=$value;
		$this->send2();
	}	

	public function rgbwwOnColor($color='Mint') {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$color = (string)$color;
		log::add('wifilight','debug','in color : '.$color);
		$this->_CodeToSend = $this->_commandCodes['rgbwwColor'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		log::add('wifilight','debug','Case');
		switch ($color) {
			case 'Random':		$this->_CodeToSend[15] = (int)mt_rand(0,255);  
								$this->_color[$this->_rgbwwActiveGroup]= $this->ColorTorgb($this->_CodeToSend[15]);
								break;
			case 'Blue':		$this->_CodeToSend[15] = (-0x00+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#0000FF' ; break;
			case 'Violet':		$this->_CodeToSend[15] = (-0xeb+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#7F00FF' ; break;
			case 'BabyBlue':	$this->_CodeToSend[15] = (-0x20+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#00bbff' ; break;
			case 'Aqua':		$this->_CodeToSend[15] = (-0x30+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#00FFFF' ; break;
			case 'SpringGreen':	$this->_CodeToSend[15] = (-0x40+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#00FF7F' ; break;
			case 'Mint':		$this->_CodeToSend[15] = (-0x4A+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#00FF43' ; break;
			case 'Green':		$this->_CodeToSend[15] = (-0x55+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#00FF00' ; break;
			case 'LimeGreen':	$this->_CodeToSend[15] = (-0x70+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#a1FF00' ; break;
			case 'Yellow':		$this->_CodeToSend[15] = (-0x80+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#FFFF00' ; break;
			case 'YellowOrange':$this->_CodeToSend[15] = (-0x88+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#FFD000' ; break;
			case 'Orange':		$this->_CodeToSend[15] = (-0x8F+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#FFA500' ; break;
			case 'Red':			$this->_CodeToSend[15] = (-0xaa+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#FF0000' ; break;
			case 'Pink':		$this->_CodeToSend[15] = (-0xbd+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#FF0061' ; break;
			case 'Fuchsia':		$this->_CodeToSend[15] = (-0xd6+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#FF00FF' ; break;
			case 'Lilac':		$this->_CodeToSend[15] = (-0xE0+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#D000FF' ; break;
			case 'Lavendar':	$this->_CodeToSend[15] = (-0xF0+170+256+10)%256; $this->_color[$this->_rgbwwActiveGroup]= '#6100FF' ; break;
			case ((int)$color > 0x00) && ((int)$color <= 0xff): $x = (int)$color; $this->_CodeToSend[15] = $x;  break;
			case (substr($color,0,1)== "#"):
				$r = (int)hexdec(substr($color,1,2));
				$g = (int)hexdec(substr($color,3,2));
				$b = (int)hexdec(substr($color,5,2));
				log::add('wifilight','debug','subst');
				$this->_CodeToSend[15]= $this->rgbToColor($r,$g,$b);
				log::add('wifilight','debug','subst2');
				log::add('wifilight','debug','Internal Milight color :'.$this->_CodeToSend[15]." hex=".dechex($this->_CodeToSend[15]));
				$this->_color[$this->_rgbwwActiveGroup]= $color;
				//log::add('wifilight','debug','222');
				break;
			default:
				$this->_CodeToSend[15] = 0x40; 
				$this->_color[$this->_rgbwwActiveGroup]=$this->ColorTorgb($this->_CodeToSend[15]);
				break;
		}
		$this->_CodeToSend[16]= $this->_CodeToSend[15];
		$this->_CodeToSend[17]= $this->_CodeToSend[15];
		$this->_CodeToSend[18]= $this->_CodeToSend[15];
		$this->send2();
		log::add('wifilight','debug','put color hex : '.$this->_color[$this->_rgbwwActiveGroup]);	
	}
	public function rgbwwOnDisco($prog) {
	//   1=rainbowSwirl, 2=whiteFade, 3=rgbwFade, 4=rainbowJump, 5=disco, 6=redTwinkle, 7=greenTwinkle, 8=blueTwinkle, 9=allCombined

		if ($prog < 1) $prog=1;
		if ($prog > 9) $prog=9;	
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoMode'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		$this->_CodeToSend[15]=$prog;		
		$this->send2();
	}
	
	public function rgbwwDiscoSlower() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoSlower'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;		
		$this->send2();
	}
	public function rgbwwDiscoFaster() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoFaster'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;		
		$this->send2();	
	}
	public function rgbwwOnDiscoNext() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoModeIncrease'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		$this->send2();
	}

	public function rgbwwOnDiscoPrev() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;				
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoModeDecrease'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;	
		$this->send2();
	}

	public function rgbwwDiscoMin() {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;	
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoSlower'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		for ($i = 0; $i < 10; $i++) {
			$this->send2();
		}
	}
	
	public function rgbwwDiscoMid() {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;	
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoSlower'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		for ($i = 0; $i < 10; $i++) {
			$this->send2();
		}
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoFaster'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		for ($i = 0; $i < 5; $i++) {
			$this->send2();
		}
	}	
	
	public function rgbwwDiscoMax() {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['rgbwwAllOn'];
		$this->_CodeToSend[19] = $this->_rgbwwActiveGroup;	
		$this->_CodeToSend = $this->_commandCodes['rgbwwDiscoFaster'];
		$this->_CodeToSend[19]=$this->_rgbwwActiveGroup;
		for ($i = 0; $i < 10; $i++) {
			$this->send2();
		}
	}


	//End Methods applicable to RGBW Lights
	// start methods for bridge color
	public function rgbwwBridgeOnBrightness($value=50) {
		if ($value<0) $value=0;
		if ($value>100) $value=100;	
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeOn'];
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeBrightness'];
		$this->_CodeToSend[15]=$value;
		$this->send2();
	}

	
	public function rgbwwBridgeOnWhite($IdGet) {
		log::add('wifilight','debug','Start White');
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeOn'];
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeSetToWhite'];
		$this->send2();	
	}

	public function rgbwwBridgeOff() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeOff'];
		$this->send2();
	}
	public function rgbwwBridgeOn() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeOn'];
		$this->send2();
	}	
	public function rgbwwBridgeOnColor($color='Mint') {
		$color = (string)$color;
		log::add('wifilight','debug','in color : '.$color);
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeOn'];
		$this->send2();

		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeColor'];
		log::add('wifilight','debug','Case');
		switch ($color) {
			case 'Random':		$this->_CodeToSend[15] = (int)mt_rand(0,255);  
								$this->_color[5]= $this->ColorTorgb($this->_CodeToSend[15]);
								break;
			case 'Blue':		$this->_CodeToSend[15] = (-0x00+170+256+10)%256; $this->_color[5]= '#0000FF' ; break;
			case 'Violet':		$this->_CodeToSend[15] = (-0xeb+170+256+10)%256; $this->_color[5]= '#7F00FF' ; break;
			case 'BabyBlue':	$this->_CodeToSend[15] = (-0x20+170+256+10)%256; $this->_color[5]= '#00bbff' ; break;
			case 'Aqua':		$this->_CodeToSend[15] = (-0x30+170+256+10)%256; $this->_color[5]= '#00FFFF' ; break;
			case 'SpringGreen':	$this->_CodeToSend[15] = (-0x40+170+256+10)%256; $this->_color[5]= '#00FF7F' ; break;
			case 'Mint':		$this->_CodeToSend[15] = (-0x4A+170+256+10)%256; $this->_color[5]= '#00FF43' ; break;
			case 'Green':		$this->_CodeToSend[15] = (-0x55+170+256+10)%256; $this->_color[5]= '#00FF00' ; break;
			case 'LimeGreen':	$this->_CodeToSend[15] = (-0x70+170+256+10)%256; $this->_color[5]= '#a1FF00' ; break;
			case 'Yellow':		$this->_CodeToSend[15] = (-0x80+170+256+10)%256; $this->_color[5]= '#FFFF00' ; break;
			case 'YellowOrange':$this->_CodeToSend[15] = (-0x88+170+256+10)%256; $this->_color[5]= '#FFD000' ; break;
			case 'Orange':		$this->_CodeToSend[15] = (-0x8F+170+256+10)%256; $this->_color[5]= '#FFA500' ; break;
			case 'Red':			$this->_CodeToSend[15] = (-0xaa+170+256+10)%256; $this->_color[5]= '#FF0000' ; break;
			case 'Pink':		$this->_CodeToSend[15] = (-0xbd+170+256+10)%256; $this->_color[5]= '#FF0061' ; break;
			case 'Fuchsia':		$this->_CodeToSend[15] = (-0xd6+170+256+10)%256; $this->_color[5]= '#FF00FF' ; break;
			case 'Lilac':		$this->_CodeToSend[15] = (-0xE0+170+256+10)%256; $this->_color[5]= '#D000FF' ; break;
			case 'Lavendar':	$this->_CodeToSend[15] = (-0xF0+170+256+10)%256; $this->_color[5]= '#6100FF' ; break;
			case ((int)$color > 0x00) && ((int)$color <= 0xff): $x = (int)$color; $this->_CodeToSend[15] = $x;  break;
			case (substr($color,0,1)== "#"):
				$r = (int)hexdec(substr($color,1,2));
				$g = (int)hexdec(substr($color,3,2));
				$b = (int)hexdec(substr($color,5,2));
				log::add('wifilight','debug','subst3');
				$this->_CodeToSend[15]= $this->rgbToColor($r,$g,$b);
				//log::add('wifilight','debug','Internal Milight color :'.$this->_commandCodes['rgbwColor'][1]." hex=".dechex($this->_commandCodes['rgbwColor'][1]));
				//$this->_color[$this->_rgbwwActiveGroup]= $this->ColorTorgb($this->_commandCodes['rgbwColor'][1]);
				//log::add('wifilight','debug','222');
				break;
			default:
				$this->_CodeToSend[15] = 0x40; 
				$this->_color[5]= $this->ColorTorgb($this->_CodeToSend[15]);
				break;
		}
		$this->_CodeToSend[16]= $this->_CodeToSend[15];
		$this->_CodeToSend[17]= $this->_CodeToSend[15];
		$this->_CodeToSend[18]= $this->_CodeToSend[15];
		$this->send2();
		log::add('wifilight','debug','put color hex : '.$this->_color[5]);
				
	}
	

	public function rgbwwBridgeDiscoSlower() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeOn'];
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeDiscoSlower'];
		$this->send2();	
	}

	public function rgbwwBridgeDiscoFaster() {
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeOn'];
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeDiscoFaster'];
		$this->send2();
	}
	public function rgbwwBridgeOnDisco($prog) {
		if ($prog < 1) $prog=1;
		if ($prog > 9) $prog=9;
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeOn'];
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['rgbwwBridgeDiscoMode'];
		$this->_CodeToSend[15]=$prog;
		$this->send2();	
	}		

	// End Methods
	// Start Methods applicable to Dual White Lights
	public function whiteSetGroup($group=0) {
		$this->_whiteActiveGroup = $group;
	}

	public function whiteGetGroup($group=0) {
		return $this->_whiteActiveGroup;
	}
	
	public function whiteOn() {
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();

	}

	public function whiteOff() {
		$this->_CodeToSend = $this->_commandCodes['whiteAllOff'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();	

	}

	public function whiteOnNight() {
		log::add('wifilight','debug','Night');
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		$this->_CodeToSend = $this->_commandCodes['whiteAllNightMode'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();	
	}
	public function whiteOnMax() {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		for ($i = 0; $i < 10; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteBrightnessInc'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}
	}
	public function whiteOnMin() {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		for ($i = 0; $i < 10; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteBrightnessDec'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}	
	}

	public function whiteOnMid() {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		for ($i = 0; $i < 10; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteBrightnessInc'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}
		for ($i = 0; $i < 5; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteBrightnessDec'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}
	}
	public function whiteOnBrightness($slider) {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		for ($i = 0; $i < 10; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteBrightnessInc'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}
		for ($i = 0; $i <11-$slider; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteBrightnessDec'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}

	}
	public function whiteBrightness($dir) {
		log::add('wifilight','debug','Bright');
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		switch ($dir) {
			case -1: 
				$this->_CodeToSend = $this->_commandCodes['whiteBrightnessDec'];
				$this->_CodeToSend[19]=$this->_whiteActiveGroup;
				$this->send2();
				break;
			case 1: 				
				$this->_CodeToSend = $this->_commandCodes['whiteBrightnessInc'];
				$this->_CodeToSend[19]=$this->_whiteActiveGroup;
				$this->send2();
				break;
		}
	}

	public function whiteOnWarm() {
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		for ($i = 0; $i < 10; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteKelvinInc'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}	
	}

	public function whiteOnCool() {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		for ($i = 0; $i < 10; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteKelvinDec'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}
	}

	public function whiteOnLukewarm() {
		$this->_repeatOK = false;
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();
		for ($i = 0; $i < 10; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteKelvinDec'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		}
		for ($i = 0; $i < 5; $i++) {
			$this->_CodeToSend = $this->_commandCodes['whiteKelvinInc'];
			$this->_CodeToSend[19]=$this->_whiteActiveGroup;
			$this->send2();
		} 
	}
	
	public function whiteColor($dir) {
		log::add('wifilight','debug','Kelv');	
		$this->_CodeToSend = $this->_commandCodes['whiteAllOn'];
		$this->_CodeToSend[19]=$this->_whiteActiveGroup;
		$this->send2();			
		switch ($dir) {
			case -1: 
				$this->_CodeToSend = $this->_commandCodes['whiteKelvinDec'];
				$this->_CodeToSend[19]=$this->_whiteActiveGroup;
				$this->send2();
				break;
			case 1: 				
				$this->_CodeToSend = $this->_commandCodes['whiteKelvinInc'];
				$this->_CodeToSend[19]=$this->_whiteActiveGroup;
				$this->send2();
				break;
		}
	 				
	}
	//End Methods applicable to Dual White Lights 
	
	private function rgbToColor($r,$g,$b) {
		$r /= 255;
		$g /= 255;
		$b /= 255;
		$max = max($r,$g,$b);
		$min = min($r,$g,$b);
		$l = ($max+$min)/2;
		$d = $max-$min;

		if($d==0){
			$h=$s=0; // achromatic
		} 
		else {
			$s=$d/(1-abs(2*$l-1));
			switch( $max ){
				case $r: $h=60*fmod((($g - $b)/$d),6); if ($b > $g) {$h += 360;} break;
				case $g: $h=60*(($b-$r)/$d+2); break;
				case $b: $h=60*(($r-$g)/$d+4); break;
			}
		}
		// This portion Copyright (c) 2014 Yashar Rashedi <info@rashedi.com>
		// modified by Bernard Caron
		//$color = (256 + 171 - round($h / 360.0 * 256.0-0.0001)) % 256;
		$color = (round($h / 360.0 * 256.0-0.0001)+10) % 256;
		//return ($color + 0xfa) & 0xff;
		return ($color) & 0xff;
	}
	private function rgbToColorw($r,$g,$b) {
		$r /= 255;
		$g /= 255;
		$b /= 255;
		$max = max($r,$g,$b);
		$min = min($r,$g,$b);
		$l = ($max+$min)/2;
		$d = $max-$min;

		if($d==0){
			$h=$s=0; // achromatic
		} 
		else {
			$s=$d/(1-abs(2*$l-1));
			switch( $max ){
				case $r: $h=60*fmod((($g - $b)/$d),6); if ($b > $g) {$h += 360;} break;
				case $g: $h=60*(($b-$r)/$d+2); break;
				case $b: $h=60*(($r-$g)/$d+4); break;
			}
		}
		// This portion Copyright (c) 2014 Yashar Rashedi <info@rashedi.com>
		// modified by Bernard Caron
		//$color = (256 + 171 - round($h / 360.0 * 256.0-0.0001)) % 256;
		$color = (round($h / 360.0 * 256.0-0.0001)) % 256;
		//return ($color + 0xfa) & 0xff;
		return ($color) & 0xff;
	}
	// common methods
	public function ColorTorgb($Col){ 
		//log::add('wifilight','debug',"col to convert :".$Col);
		$Colrgb=array(0,0,0);
		//$Hue= (((int)((171.-$Col)*360./256.))+720) % 360;
		$Hue= (((int)((($Col-10))*360./256.))+720) % 360;
		$Sat=1.;
		$Lum=0.5;
		$Hue2=$Hue/60;
		$C = (1 - abs(2.*$Lum - 1))*$Sat; 
		$m=$Lum-$C/2;
		$RE=$Hue2-((int)($Hue2/2))*2;
		$X = $C * (1. - abs($RE - 1));
		//log::add('wifilight','debug',"Hue C X m RE=".$Hue." ".$C." ".$X." ".$m." ".$RE);
		if (0<=$Hue && $Hue<60) {
			$R=$C;
			$G=$X;
			$B=0;
		}
		if (60<=$Hue && $Hue<120) {
			$R=$X;
			$G=$C;
			$B=0;
		}
		if (120<=$Hue && $Hue<180) {
			$R=0;
			$G=$C;
			$B=$X;
		}
		if (180<=$Hue && $Hue<240) {
			$R=0;
			$G=$X;
			$B=$C;
		}
		if (240<=$Hue && $Hue<300) {
			$R=$X;
			$G=0;
			$B=$C;
		}
		if (300<=$Hue && $Hue<360) {
			$R=$C;
			$G=0;
			$B=$X;
		}
		$Colrgb[0]=($R+$m)*255;
		$Colrgb[1]=($G+$m)*255;
		$Colrgb[2]=($B+$m)*255;
	
		//log::add('wifilight','debug',"col to convert :".$Colrgb[0]." ".$Colrgb[1]." ".$Colrgb[2]);
		//log::add('wifilight','debug','3');
		$hex=$this->rgb2hex($Colrgb);
		//log::add('wifilight','debug','Ret :'.$hex);
		return $hex;		
	}
	public function ColorTorgbw($Col){ 
		//log::add('wifilight','debug',"col to convert :".$Col);
		$Colrgb=array(0,0,0);
		//$Hue= (((int)((171.-$Col)*360./256.))+720) % 360;
		$Hue= (((int)((($Col))*360./256.))+720) % 360;
		$Sat=1.;
		$Lum=0.5;
		$Hue2=$Hue/60;
		$C = (1 - abs(2.*$Lum - 1))*$Sat; 
		$m=$Lum-$C/2;
		$RE=$Hue2-((int)($Hue2/2))*2;
		$X = $C * (1. - abs($RE - 1));
		//log::add('wifilight','debug',"Hue C X m RE=".$Hue." ".$C." ".$X." ".$m." ".$RE);
		if (0<=$Hue && $Hue<60) {
			$R=$C;
			$G=$X;
			$B=0;
		}
		if (60<=$Hue && $Hue<120) {
			$R=$X;
			$G=$C;
			$B=0;
		}
		if (120<=$Hue && $Hue<180) {
			$R=0;
			$G=$C;
			$B=$X;
		}
		if (180<=$Hue && $Hue<240) {
			$R=0;
			$G=$X;
			$B=$C;
		}
		if (240<=$Hue && $Hue<300) {
			$R=$X;
			$G=0;
			$B=$C;
		}
		if (300<=$Hue && $Hue<360) {
			$R=$C;
			$G=0;
			$B=$X;
		}
		$Colrgb[0]=($R+$m)*255;
		$Colrgb[1]=($G+$m)*255;
		$Colrgb[2]=($B+$m)*255;
	
		//log::add('wifilight','debug',"col to convert :".$Colrgb[0]." ".$Colrgb[1]." ".$Colrgb[2]);
		//log::add('wifilight','debug','3');
		$hex=$this->rgb2hex($Colrgb);
		//log::add('wifilight','debug','Ret :'.$hex);
		return $hex;		
	}
	public function rgb2hex($rgb) {
	   $hex = "#";
	   $hex .= str_pad(dechex($rgb[0]), 2, "0", STR_PAD_LEFT);
	   $hex .= str_pad(dechex($rgb[1]), 2, "0", STR_PAD_LEFT);
	   $hex .= str_pad(dechex($rgb[2]), 2, "0", STR_PAD_LEFT);
	   return $hex; // returns the hex value including the number sign (#)
	}
	
}
?>
